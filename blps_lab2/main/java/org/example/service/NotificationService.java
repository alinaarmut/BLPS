package org.example.service;


import lombok.extern.slf4j.Slf4j;
import org.example.entity.Booking;
import org.example.entity.Notification;
import org.example.entity.User;
import org.example.entity.enums_status.UserRole;
import org.example.repository.NotificationRepository;
import org.example.repository.UserRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.PlatformTransactionManager;
import org.springframework.transaction.TransactionStatus;
import org.springframework.transaction.support.TransactionCallbackWithoutResult;
import org.springframework.transaction.support.TransactionTemplate;

import javax.annotation.Resource;
import javax.transaction.UserTransaction;
import java.util.List;
@Slf4j
@Service
public class NotificationService {

@Resource
private UserTransaction userTransaction;

    private final NotificationRepository notificationRepository;
    private final UserRepository userRepository;

    public NotificationService(NotificationRepository notificationRepository, UserRepository userRepository) {
        this.notificationRepository = notificationRepository;
        this.userRepository = userRepository;
    }

    public void notifyHost(Booking request) {
        try {
            log.info("–ù–∞—á–∞–ª–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ Narayana –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ö–æ—Å—Ç–∞");
            userTransaction.begin();

            User host = userRepository.findByRoles_RoleName(UserRole.HOST)
                    .orElseThrow(() -> new RuntimeException("Host not found"));

            System.out.println("üì® –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –•–û–°–¢–£: –ø–æ—Å—Ç—É–ø–∏–ª–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ!");
            System.out.println("üõè –ù–∞–∑–≤–∞–Ω–∏–µ: " + request.getTitle());
            System.out.println("üí¨ –û–ø–∏—Å–∞–Ω–∏–µ: " + request.getDescription());

            Notification notification = new Notification(System.currentTimeMillis(), host, request);
            notificationRepository.save(notification);

            userTransaction.commit();
            log.info("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–∞");

        } catch (Exception e) {
            try {
                log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏, –æ—Ç–∫–∞—Ç—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é", e);
                userTransaction.rollback();
            } catch (Exception rollbackEx) {
                log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–∞—Ç–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏", rollbackEx);
            }
            throw new RuntimeException("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", e);
        }
    }

    public List<Notification> getAllNotifications() {
        return notificationRepository.findAll();
    }
}
